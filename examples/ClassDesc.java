/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package eu.pozoga.nice.classes;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;

/**
 *
 * @author Sebastian Po≈ºoga
 */
public class ClassDesc<T> {
    
    private static final Class[] NO_CLASS_ARGUMENTS = new Class[]{};
    private static final Object[] NO_ARGUMENTS = new Object[]{};
    
    
    Class<T> c;
    Collection<Method> methods;
    Collection<Field> fields;
    //Autogenerated
    Collection<String> properties;
    Map<String, PropertyDescriptor> propertyDescriptors;

    public ClassDesc(Class<T> c) {
        this.c = c;
        this.methods = Arrays.asList(c.getMethods());
        this.fields = Arrays.asList(c.getFields());
    }

    public ClassDesc(Class c, Collection<Method> methods, Collection<Field> fields) {
        this.c = c;
        this.methods = methods;
        this.fields = fields;
    }

    public Collection<Field> getFields() {
        return fields;
    }

    public Collection<Method> getMethods() {
        return methods;
    }

    public ClassDesc select(TypeFilter f) {
        //select method
        Collection<Method> sMethods = new HashSet<Method>();
        for (Method m : methods) {
            if (f.filter(m)) {
                sMethods.add(m);
            }
        }
        //select field
        Collection<Field> sFields = new HashSet<Field>();
        for (Field field : fields) {
            if (f.filter(field)) {
                sFields.add(field);
            }
        }
        return new ClassDesc(c, sMethods, sFields);
    }

    public Collection<String> getProperties() throws Exception {
        if (properties == null) {
            properties = new HashSet<String>();
            properties.addAll(getPropertyDescriptors().keySet());
            for (Field f : c.getFields()) {
                if (!properties.contains(f.getName())) {
                    properties.add(f.getName());
                }
            }
            properties.remove("class");
        }
        return properties;
    }

    private Map<String, PropertyDescriptor> getPropertyDescriptors() throws IntrospectionException {
        if (propertyDescriptors != null) {
            return propertyDescriptors;
        }
        propertyDescriptors = new HashMap<String, PropertyDescriptor>();
        //load data
        BeanInfo beanInfo = Introspector.getBeanInfo(c);
        PropertyDescriptor[] array = beanInfo.getPropertyDescriptors();
        for (int i = 0; i < array.length; i++) {
            PropertyDescriptor d = array[i];
            propertyDescriptors.put(d.getName(), d);
        }
        return propertyDescriptors;
    }

    public Object getProperty(Object bean, String propertyName) throws IntrospectionException, Exception {
        //Read by method 
        PropertyDescriptor desc = getPropertyDescriptors().get(propertyName);
        if (desc != null) {
            Method readMethod = desc.getReadMethod();
            if (readMethod != null) {
                return readMethod.invoke(bean, NO_ARGUMENTS);
            }
        }
        //read from public field
        Field field = bean.getClass().getField(propertyName);
        if (field != null) {
            return field.get(bean);
        }
        throw new Exception("No contains propert named " + propertyName);
    }

    public void setProperty(Object bean, String propertyName, Object value) throws IntrospectionException, Exception {
        //Write by method 
        PropertyDescriptor desc = getPropertyDescriptors().get(propertyName);
        if (desc != null) {
            Method writeMethod = desc.getWriteMethod();
            if (writeMethod != null) {
                writeMethod.invoke(bean, new Object[]{value});
                return;
            }
        }
        //Write to public field
        Field field = bean.getClass().getField(propertyName);
        if (field != null) {
            field.set(bean, value);
            return;
        }
        throw new Exception("No contains propert named " + propertyName);
    }

    public Class getPropertyType(String name) throws Exception {
        PropertyDescriptor prop = getPropertyDescriptors().get(name);
        if (prop == null) {
            return c.getField(name).getType();
        }
        return prop.getPropertyType();
    }
    
//    public Collection invokeAll(Object[] args) throws Exception{
//        Set returns = new HashSet();
//        for(Method m : methods){
//            Object r = m.invoke(getInstance(), args);
//            returns.add(r);
//        }
//        return returns;
//    }
    
    protected T instance;
    public T getInstance() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException{
        if(instance==null){
            instance = c.newInstance();
        }
        return instance;
    }
}

